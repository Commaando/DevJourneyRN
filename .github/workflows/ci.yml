name: CI Pipeline â€“ Android Build and Release

on:
  push:
    branches:
      - '**'

jobs:
  build-android:
    if: contains(github.event.head_commit.message, 'BUILD:')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Read version from build-version.json
        id: version
        run: |
          VERSION=$(jq -r .buildNumber < build-version.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle files
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android APK
        working-directory: android
        run: ./gradlew assembleRelease

      - name: Rename APK using build version
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mv android/app/build/outputs/apk/release/app-release.apk android/app/build/outputs/apk/release/devjourney-${VERSION}.apk

      - name: Upload APK to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          TAG="v$VERSION"
          APK_PATH="android/app/build/outputs/apk/release/devjourney-$VERSION.apk"

          # Create Git tag if it doesn't exist
          if ! git rev-parse "$TAG" >/dev/null 2>&1; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag "$TAG"
            git push origin "$TAG"
          fi

          # Create or update a GitHub release
          gh release create "$TAG" "$APK_PATH" \
            --title "Version $VERSION" \
            --notes "Automated build for version $VERSION"
